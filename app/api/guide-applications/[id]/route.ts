import { NextRequest, NextResponse } from 'next/server'

export async function PUT(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const { status, reviewComments } = await request.json()
    const applicationId = params.id

    // Validation
    if (!['approuve', 'rejete'].includes(status)) {
      return NextResponse.json(
        { message: 'Statut invalide' },
        { status: 400 }
      )
    }

    // TODO: Mettre √† jour dans la base de donn√©es
    console.log(`üîÑ Mise √† jour candidature ${applicationId}:`, {
      status,
      reviewComments,
      reviewedAt: new Date().toISOString(),
      reviewedBy: 'admin' // TODO: r√©cup√©rer l'ID de l'admin connect√©
    })

    // TODO: Si approuv√©, cr√©er le compte guide et envoyer email de bienvenue
    // TODO: Si rejet√©, envoyer email de notification
    
    if (status === 'approuve') {
      console.log('üìß Envoi email de bienvenue au nouveau guide')
      // TODO: Cr√©er le compte guide dans la table users
      // TODO: Configurer le profil guide
    } else {
      console.log('üìß Envoi email de rejet avec commentaires')
    }

    return NextResponse.json({
      message: `Candidature ${status === 'approuve' ? 'approuv√©e' : 'rejet√©e'} avec succ√®s`,
      applicationId,
      newStatus: status
    })

  } catch (error) {
    console.error('‚ùå Erreur lors de la mise √† jour:', error)
    return NextResponse.json(
      { message: 'Erreur interne du serveur' },
      { status: 500 }
    )
  }
}

export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const applicationId = params.id

    // TODO: R√©cup√©rer depuis la base de donn√©es
    const mockApplication = {
      id: applicationId,
      email: 'marie.dubois@gmail.com',
      firstName: 'Marie',
      lastName: 'Dubois',
      status: 'en_attente',
      submittedAt: new Date().toISOString()
    }

    return NextResponse.json({
      application: mockApplication
    })

  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration:', error)
    return NextResponse.json(
      { message: 'Erreur interne du serveur' },
      { status: 500 }
    )
  }
}
