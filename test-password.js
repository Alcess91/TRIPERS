// Test de debug pour v√©rifier le probl√®me de mot de passe
const bcrypt = require('bcryptjs');

const testPassword = 'testpassword123';

console.log('=== Debug Password Hash/Compare ===\n');

async function testPasswordFlow() {
  try {
    console.log('üîê Test password:', testPassword);
    
    // 1. Test du hachage (comme dans register)
    console.log('\n1Ô∏è‚É£ HASH PASSWORD (comme dans register)');
    const hashedPassword = await bcrypt.hash(testPassword, 12);
    console.log('‚úÖ Hashed password:', hashedPassword);
    console.log('üìè Hash length:', hashedPassword.length);
    
    // 2. Test de la comparaison (comme dans login)
    console.log('\n2Ô∏è‚É£ COMPARE PASSWORD (comme dans login)');
    const isValid = await bcrypt.compare(testPassword, hashedPassword);
    console.log('‚úÖ Password comparison result:', isValid);
    
    if (isValid) {
      console.log('üéâ Hash/Compare fonctionne correctement!');
    } else {
      console.log('‚ùå PROBL√àME: Hash/Compare ne fonctionne pas!');
    }
    
    // 3. Test avec un mauvais mot de passe
    console.log('\n3Ô∏è‚É£ TEST WRONG PASSWORD');
    const wrongPassword = 'wrongpassword';
    const isWrongValid = await bcrypt.compare(wrongPassword, hashedPassword);
    console.log('‚ùå Wrong password result:', isWrongValid, '(should be false)');
    
    // 4. Test avec diff√©rents rounds
    console.log('\n4Ô∏è‚É£ TEST DIFFERENT ROUNDS');
    const hash10 = await bcrypt.hash(testPassword, 10);
    const hash12 = await bcrypt.hash(testPassword, 12);
    
    console.log('Hash with 10 rounds:', await bcrypt.compare(testPassword, hash10));
    console.log('Hash with 12 rounds:', await bcrypt.compare(testPassword, hash12));
    
  } catch (error) {
    console.error('üí• Error in password test:', error);
  }
}

testPasswordFlow();
