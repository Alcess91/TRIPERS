// Test pour reproduire le probl√®me de la page onboarding
const testEmail = 'onboarding-test-' + Date.now() + '@example.com';
const testPassword = 'testpassword123';

console.log('=== Test Sp√©cifique Page Onboarding ===\n');

// Simuler exactement ce que fait le navigateur
const cookies = new Map();

const fetchWithCookies = async (url, options = {}) => {
  // Inclure credentials comme dans le hook useAuth
  options.credentials = 'include';
  
  // Ajouter les cookies manuellement aussi (pour debug)
  const cookieString = Array.from(cookies.entries())
    .map(([name, value]) => `${name}=${value}`)
    .join('; ');
  
  if (cookieString) {
    options.headers = {
      ...options.headers,
      'Cookie': cookieString
    };
  }

  console.log('üîç Requ√™te:', options.method || 'GET', url);
  console.log('üç™ Cookies envoy√©s:', cookieString ? 'OUI' : 'NON');
  
  const response = await fetch(url, options);
  
  // Extraire les cookies de la r√©ponse
  const setCookieHeader = response.headers.get('set-cookie');
  if (setCookieHeader) {
    const match = setCookieHeader.match(/auth-token=([^;]+)/);
    if (match) {
      cookies.set('auth-token', match[1]);
      console.log('üì• Cookie re√ßu et stock√©');
    }
  }
  
  console.log('üìä Status:', response.status);
  return response;
};

async function testOnboardingFlow() {
  try {
    // 1. Inscription (comme sur /auth)
    console.log('1Ô∏è‚É£ INSCRIPTION via /auth');
    const registerResponse = await fetchWithCookies('http://localhost:3000/api/auth/register', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email: testEmail, password: testPassword })
    });

    if (!registerResponse.ok) {
      const error = await registerResponse.json();
      console.log('‚ùå Erreur inscription:', error);
      return;
    }

    const userData = await registerResponse.json();
    console.log('‚úÖ Inscrit avec succ√®s, ID:', userData.id);
    console.log('');

    // 2. Redirection vers /onboarding - simuler le checkAuth du useAuth
    console.log('2Ô∏è‚É£ ARRIV√âE SUR /onboarding - v√©rification auth');
    const authCheckResponse = await fetchWithCookies('http://localhost:3000/api/auth/me');
    
    if (!authCheckResponse.ok) {
      console.log('‚ùå Auth check a √©chou√© - utilisateur serait redirig√© vers /auth');
      return;
    }

    const authData = await authCheckResponse.json();
    console.log('‚úÖ Auth v√©rifi√©e, utilisateur:', authData.email);
    console.log('üìã Profil complet:', authData.profileComplete);
    console.log('');

    // 3. Soumission du formulaire onboarding (exact format de la page)
    console.log('3Ô∏è‚É£ SOUMISSION FORMULAIRE ONBOARDING');
    
    // Reproduire exactement ce que fait handleSubmit dans onboarding/page.tsx
    const formData = {
      first_name: 'Test',
      last_name: 'User',
      country: 'France',
      languages: ['fran√ßais', 'anglais'], // Tableau comme dans le formulaire
      hobbies: 'voyage, photographie' // String comme converti dans handleSubmit
    };

    console.log('üìù Donn√©es envoy√©es:', JSON.stringify(formData, null, 2));

    const updateResponse = await fetchWithCookies('http://localhost:3000/api/auth/me', {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(formData)
    });

    if (updateResponse.ok) {
      const updatedUser = await updateResponse.json();
      console.log('‚úÖ Profil mis √† jour avec succ√®s!');
      console.log('üë§ Nom:', updatedUser.first_name, updatedUser.last_name);
      console.log('‚ú® Profil complet:', updatedUser.profileComplete);
      console.log('üéØ Utilisateur devrait √™tre redirig√© vers /explore');
    } else {
      const error = await updateResponse.json();
      console.log('‚ùå ERREUR mise √† jour profil:', error);
      console.log('üí° C\'est ici que l\'utilisateur voit "erreur lors de la mise √† jour du profil"');
    }

  } catch (error) {
    console.error('‚ùå Erreur dans le test:', error);
  }
}

testOnboardingFlow();
